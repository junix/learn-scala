package pe


/**
  * Each new term in the Fibonacci sequence is generated by adding the
  * previous two terms. By starting with 1 and 2, the first 10 terms will be:
  * *
  * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  * *
  * Find the sum of all the even-valued terms in the sequence which do not
  * exceed four million.
  */

import scala.annotation.tailrec
import scala.collection.immutable.Stream
import scala.math.BigInt

object P002 {
  def fibs = {
    def go(a: Int, b: Int): Stream[Int] = (a + b) #:: go(b, a + b)
    1 #:: 2 #:: go(1, 2)
  }

  def fs : Stream[BigInt] = BigInt(1) #::
                            BigInt(2) #::
                            fs.zip(fs.tail).map { n => n._1+n._2}

  def solve01 = fibs
    .takeWhile(_ < 4000000)
    .filter {
      _ % 2 == 0
    }
    .sum

  def solve02 = {

    @tailrec
    def go(a: Int, b: Int, acc: Int): Int = a match {
      case v if v > 4000000 => acc
      case v if v % 2 == 0 => go(b, a + b, acc + a)
      case _ => go(b, a + b, acc)
    }

    go(1, 2, 0)
  }
}

